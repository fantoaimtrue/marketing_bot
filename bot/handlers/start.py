import asyncio
from email import message
from re import U
from aiogram import Router
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup 
from aiogram.types import FSInputFile
from aiogram.types import Message, CallbackQuery
from aiogram.methods import SendPhoto
from aiogram.filters import Command
from sqlalchemy.future import select
from Data.db import get_message_by_id, get_session, get_mission_by_id, get_year_by_id
from Data.models import User
from keyboards.inline import buy_place, kb_check_error, kb_mission, check_subscribe, check_subscribe_return
from main import check_user_subscription


router = Router()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_or_create_user(db_session, message: Message):
    query = select(User).where(User.user_id == message.from_user.id)
    result = await db_session.execute(query)
    user = result.scalar_one_or_none()

    if user is None:
        user = User(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        db_session.add(user)
        await db_session.commit()
    return user


class Form(StatesGroup):
    change_date = State()
    date = State()
    check_date = State()
    get_mission = State()
    check_sub_chanel = State()



@router.message(Command(commands=["start"]))
async def cmd_start(message: Message, state: FSMContext):
    async with await get_session() as db_session:
        await get_or_create_user(db_session, message)
        text_1 = ("–ü—Ä–∏–≤–µ—Ç! üëã –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.\n\n"
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –î–µ–Ω–∏—Å –°–∞—Ç–∞–µ–≤. –Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –±–∏–∑–Ω–µ—Å-–∫–æ—É—á.\n\n"
            "–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ä–∞–±–æ—Ç–µ —Å–æ –º–Ω–æ–π –ª—é–¥–∏:\n\nüìç–º–µ–Ω—è—é—Ç –∏ –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∞—é—Ç —Å–≤–æ—ë –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ, –º—ã—à–ª–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
            "üìç–Ω–∞—Ö–æ–¥—è—Ç –º–∏—Å—Å–∏—é –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è –∏–∑ —Å–≤–æ–µ–π –¥–∞–Ω–Ω–æ—Å—Ç–∏\n"
            "üìç–Ω–∞—á–∏–Ω–∞—é—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è –∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö –æ–∫—Ä—É–∂–∞—é—Ç\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç: —É—á–µ–Ω–∏–∫–∏ –¥–µ–ª–∞—é—Ç –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –∫ –Ω–æ–≤–æ–π, –∂–µ–ª–∞–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–æ–≥–∞—á–µ, —É—Å–ø–µ—à–Ω–µ–µ –∏ —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ üî•\n\n"
            "–ò —É –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –ø–æ–¥–∞—Ä–æ–∫ üéÅ\n\n"
            "<b><i>–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –ø—Ä–æ–π–¥–∏ —ç–∫—Å–ø—Ä–µ—Å—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –Ω–∞ –ø—É—Ç–∏ –∫ —Å–≤–æ–µ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é üëá</i></b>")
        photo = FSInputFile('photo/main.jpg')
        await state.set_state(Form.date)
        await message.answer_photo(photo=photo, caption=text_1, parse_mode="HTML")
        
        await asyncio.sleep(5)
        text_2 = (
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, —è —Å–¥–µ–ª–∞—é —Ä–∞—Å—á–µ—Ç –∏ –ø—Ä–∏—à–ª—é –∫—Ä–∞—Ç–∫—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É\n\n"
            "üìç –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY\n\n"
            "–ü—Ä–∏–º–µ—Ä: –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å 09.08.1998. –ó–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å: 09.08.1998"
        )
        await message.answer(text=text_2)
        
        
@router.message(Form.date, F.text.regexp(r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.(19|20)\d{2}$"))
async def process_date(message: Message, state: FSMContext):
    async with await get_session() as db_session:
        await state.update_data(date=message.text)
        data = await state.get_data()
        await state.set_state(Form.check_date)
        text_3 = (
            "–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ, –≤—Å–µ –≤–µ—Ä–Ω–æ? ü§î\n\n"
        )
        await message.answer(f'{text_3}{data.get("date")}', parse_mode="HTML", reply_markup=kb_check_error().as_markup())
    



@router.callback_query(Form.check_date, F.data == 'check_yes')
async def check_date(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    date = data.get('date')
    
    if not date:
        await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
    def reduce_to_single_digit(date_str):
        day, _, _ = date_str.split(".")  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å
        total = sum(int(digit) for digit in day)  # –°–∫–ª–∞–¥—ã–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã –¥–Ω—è
        
        while total >= 10:
            total = sum(int(digit) for digit in str(total))  # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
        
        return total

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    reduce = reduce_to_single_digit(date)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —á–∏—Å–ª—É
        photo = FSInputFile(f'photo/conscience/{str(reduce)}.jpg')
        await callback.message.answer_photo(photo=photo)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        message = await get_message_by_id(message_id=reduce)
        await callback.message.answer(message.description)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(Form.get_mission)
        await callback.message.answer(
            '–¢—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –º–∏—Å—Å–∏—é –∏—Å—Ö–æ–¥—è –∏–∑ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è? üî•',
            parse_mode="HTML",
            reply_markup=kb_mission().as_markup()
        )
    except Exception as ex:
        await callback.message.answer(f'–û—à–∏–±–∫–∞: {ex}')



@router.callback_query(Form.get_mission, F.data=='kb_mission_yes')
async def get_mission(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    date = data['date']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
    def calculate_single_digit(date_str):
        total = sum(int(char) for char in date_str if char.isdigit())
        while total > 9:
            total = sum(int(digit) for digit in str(total))
        return total
    
    single_digit = calculate_single_digit(date)
    message = await get_mission_by_id(message_id=single_digit)
    text_3 = (
        "–í –ø–æ–¥–∞—Ä–æ–∫ —è —Ö–æ—á—É –¥–∞—Ç—å —Ç–µ–±–µ –ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ 2024 –≥–æ–¥! –í –Ω–µ–º —Ç—ã —É–∑–Ω–∞–µ—à—å —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —Å–∫–∞—á–∫–∞ –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö –∂–∏–∑–Ω–∏.\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ¬´–†–ê–°–ß–ï–¢–ê¬ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç—É–ø–∏ –≤ –∫–∞–Ω–∞–ª üëáüèº"
        "https://t.me/testfantoaimtrue"
    )
    
    photo = FSInputFile(f'photo/mission/{str(single_digit)}.jpg')
    await callback.message.answer_photo(photo=photo)
    await callback.message.answer(message.description)
    
    question = "–£–∑–Ω–∞–µ—Ç–µ —Å–µ–±—è?"
    options = ["–î–∞", "–ù–µ—Ç", "–ù–µ–º–Ω–æ–≥–æ"]
    await callback.message.answer_poll(question=question, options=options, is_anonymous=True, allows_multiple_answers=False)
    await callback.message.answer(text_3, parse_mode="HTML", reply_markup=check_subscribe().as_markup())
    await state.set_state(Form.check_sub_chanel)
    
    
    
@router.callback_query(Form.check_sub_chanel, F.data == 'check_sub')
async def check_channel_sub(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    is_subscribed = await check_user_subscription(user_id)
    text_4 = (
        f"{callback.from_user.username}, –ø—Ä–µ–¥—Å—Ç–∞–≤—å —Å–µ–±–µ –∂–∏–∑–Ω—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –º–µ—Å—Ç–∞ —É–ø—É—â–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º. \n\n"
        "–¢–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ–∑–Ω–∞–∫–æ–º—ã —Å–æ–∂–∞–ª–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥–Ω–æ–π —à–∞–Ω—Å ‚Äú–ø—Ä–æ–ø–ª—ã–≤–∞–µ—Ç –º–∏–º–æ‚Äù, –∏ —Ç—ã –±—É–∫–≤–∞–ª—å–Ω–æ '–ø—Ä–∏—Ç—è–≥–∏–≤–∞–µ—à—å' –∫ —Å–µ–±–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –í—Å–µ —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª–∏—Å—å, –∏ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º –∂–∏–∑–Ω—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å—ë –ª—É—á—à–µ –∏ –ª—É—á—à–µ!‚ú®\n\n"
        "–ò–º–µ–Ω–Ω–æ —Ç–∞–∫—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —Ç—ã —Å–æ–∑–¥–∞—à—å —Å–µ–±–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞.\n\n"
        "–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è, —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1491 —Ä—É–±–ª—å / 17$, –≤–º–µ—Å—Ç–æ 6000 —Ä—É–±–ª–µ–π / 68$\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n1. –†–∞–∑–±–æ—Ä –ß–∏—Å–ª–∞ –°–æ–∑–Ω–∞–Ω–∏—è - —á–∏—Å–ª–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –î—É—à–∏ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ —ç–≥–æ, –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ, –ø—Ä–∏—á–∏–Ω—ã —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è, –∑–∞–¥–∞—á–∞, –ø–æ–Ω–∏–º–∞–Ω–∏–µ..)\n"
        "2. –†–∞–∑–±–æ—Ä ¬´–ú–∞—Ç—Ä–∏—Ü—ã¬ª - –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –°–æ–∑–Ω–∞–Ω–∏—è –∏ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –î—É—à–∞ –ø—Ä–∏—à–ª–∞ –Ω–∞—Ä–∞–±–æ—Ç–∞—Ç—å.\n"
        "3. –†–∞–∑–±–æ—Ä —á–∏—Å–ª–∞ –ú–∏—Å—Å–∏–∏ (–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ)\n"
        "4. –û–±–æ–∑–Ω–∞—á–∞—é—Ç—Å—è –∏ –ø—Ä–æ—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞—Ä–∞–±–æ—Ç–∫–∏ –ú–∞—Ç—Ä–∏—Ü—ã\n"
        "5. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥, –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –≤–ª–∏—è–Ω–∏–µ\n"
        "6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ñ–µ—Ä—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞\n"
        "7. –†–∞–∑–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –∏–º–µ–Ω–∏\n\n"
        "+ –ë–û–ù–£–° —ç–∫—Å–ø—Ä–µ—Å—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://sblnk.ru/1167589460"
    )
    data = await state.get_data()
    date = data['date']
    
    def reduce_to_single_digit(date_str):
        day, month, _ = date_str.split(".")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
        # –°—É–º–º–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä—ã –¥–Ω—è –∏ –º–µ—Å—è—Ü–∞
        total = sum(int(digit) for digit in day) + sum(int(digit) for digit in month) + 8  # 2 + 2 + 4 = 8
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
        while total >= 10:
            total = sum(int(digit) for digit in str(total))
        
        return total
    
    single_digit = reduce_to_single_digit(date)
    message = await get_year_by_id(message_id=single_digit)
    if is_subscribed:
        photo = FSInputFile(f'photo/years/{str(single_digit)}.jpg')
        await callback.message.answer_photo(photo=photo)
        await callback.message.answer(text=message.description)
        await callback.message.answer(text=text_4, reply_markup=buy_place().as_markup())
    else:
        await callback.message.answer(
            "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –µ—â—ë —Ä–∞–∑.", reply_markup=check_subscribe_return().as_markup()
        )
    




